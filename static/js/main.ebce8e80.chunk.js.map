{"version":3,"sources":["ColorModeSwitcher.tsx","components/note-form.tsx","components/top-nav.tsx","components/note-modal.tsx","components/notes-list.tsx","components/hero-section.tsx","components/motion/motion.tsx","components/home-page.tsx","App.tsx","index.tsx"],"names":["ColorModeSwitcher","props","toggleColorMode","useColorMode","text","useColorModeValue","SwitchIcon","FaMoon","FaSun","size","fontSize","variant","color","marginLeft","onClick","icon","NoteForm","isOpen","onClose","selectedNote","handleNoteCreate","handleNoteUpdate","useForm","mode","register","handleSubmit","formState","errors","isCentered","motionPreset","onSubmit","data","newNote","id","title","body","nanoid","pb","isInvalid","isRequired","name","placeholder","defaultValue","ref","validate","value","message","mt","borderRadius","type","colorScheme","isLoading","isSubmitting","mr","TopNav","useDisclosure","onOpen","mb","align","p","to","motion","div","whileHover","scale","as","bgGradient","bgClip","_focus","boxShadow","outline","_hover","textDecoration","leftIcon","Add","justifySelf","NoteModal","AnimatePresence","layoutId","scrollBehavior","isTruncated","paddingRight","NotesList","notes","handleClick","setNotes","bg","React","setSelectedNote","toast","useToast","showToast","status","position","duration","isClosable","AnimateSharedLayout","minH","columnWidth","map","note","in","y","handleSelectedNote","py","px","maxH","w","rounded","overflow","cursor","role","_groupHover","justifyContent","textTransform","fontWeight","letterSpacing","display","spacing","EditIcon","h","e","stopPropagation","DeleteIcon","newNotes","filter","onDelete","fontFamily","noOfLines","base","md","HeroSection","offsetY","whileTap","sm","lineHeight","textShadow","MotionBox","custom","Box","AnimatePage","children","initial","exitBeforeEnter","animate","exit","flexGrow","variants","opacity","enter","HomePage","length","find","newNotesState","findIndex","App","theme","textAlign","push","ReactDOM","render","maxW","mx","document","getElementById"],"mappings":"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","file":"static/js/main.ebce8e80.chunk.js","sourcesContent":["import * as React from \"react\"\nimport {\n  useColorMode,\n  useColorModeValue,\n  IconButton,\n  IconButtonProps,\n} from \"@chakra-ui/react\"\nimport { FaMoon, FaSun } from \"react-icons/fa\"\n\ntype ColorModeSwitcherProps = Omit<IconButtonProps, \"aria-label\">\n\nexport const ColorModeSwitcher: React.FC<ColorModeSwitcherProps> = (props) => {\n  const { toggleColorMode } = useColorMode()\n  const text = useColorModeValue(\"dark\", \"light\")\n  const SwitchIcon = useColorModeValue(FaMoon, FaSun)\n\n  return (\n    <IconButton\n      size=\"md\"\n      fontSize=\"lg\"\n      variant=\"ghost\"\n      color=\"current\"\n      marginLeft=\"2\"\n      onClick={toggleColorMode}\n      icon={<SwitchIcon />}\n      aria-label={`Switch to ${text} mode`}\n      {...props}\n    />\n  )\n}\n","import * as React from \"react\";\nimport {\n  Button,\n  ModalContent,\n  Modal,\n  ModalBody,\n  ModalOverlay,\n  ModalFooter,\n  ModalHeader,\n  ModalCloseButton,\n  FormControl,\n  FormLabel,\n  FormErrorMessage,\n  Input,\n  Textarea\n} from \"@chakra-ui/react\";\nimport { nanoid } from \"nanoid\";\nimport { SubmitHandler } from \"react-hook-form\";\nimport { useForm } from \"react-hook-form\";\n\nexport interface NoteFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedNote?: note;\n  handleNoteCreate?: (note: note) => void;\n  handleNoteUpdate?: (note: note) => void;\n}\n\ntype FormInputs = {\n  title: string;\n  body: string;\n};\n\nconst NoteForm: React.SFC<NoteFormProps> = ({\n  isOpen,\n  onClose,\n  selectedNote,\n  handleNoteCreate,\n  handleNoteUpdate\n}) => {\n  const { register, handleSubmit, formState, errors } = useForm<FormInputs>({\n    mode: \"onChange\"\n  });\n\n  const onSubmit: SubmitHandler<FormInputs> = data => {\n    let newNote: note = {\n      id: \"\",\n      title: data.title,\n      body: data.body\n    };\n    if (handleNoteCreate) {\n      newNote.id = nanoid();\n      if (handleNoteCreate) handleNoteCreate(newNote);\n    } else {\n      newNote.id = selectedNote ? selectedNote.id : \"\";\n      if (handleNoteUpdate) handleNoteUpdate(newNote);\n    }\n    onClose();\n  };\n\n  const validateTitle = (value: string) => {\n    if (!value) {\n      return \"Title is required\";\n    } else return true;\n  };\n\n  const validateBody = (value: string) => {\n    if (!value) {\n      return \"Body is required\";\n    } else return true;\n  };\n\n  return (\n    <Modal\n      isOpen={isOpen}\n      onClose={onClose}\n      size=\"lg\"\n      isCentered\n      motionPreset=\"slideInBottom\"\n    >\n      <ModalOverlay />\n      <ModalContent>\n        <form onSubmit={handleSubmit(onSubmit)}>\n          <ModalHeader>{selectedNote ? \"Edit\" : \"Create\"} a Note</ModalHeader>\n          <ModalCloseButton />\n          <ModalBody pb={6}>\n            <FormControl isInvalid={!!errors?.title} isRequired>\n              <FormLabel>Title</FormLabel>\n              <Input\n                name=\"title\"\n                placeholder=\"Title\"\n                defaultValue={selectedNote?.title}\n                ref={register({ validate: validateTitle })}\n              />\n              <FormErrorMessage>\n                {!!errors?.title && errors?.title?.message}\n              </FormErrorMessage>\n            </FormControl>\n            <FormControl size=\"lg\" mt={4} isInvalid={!!errors?.body} isRequired>\n              <FormLabel>Body</FormLabel>\n              <Textarea\n                name=\"body\"\n                placeholder=\"Body\"\n                size=\"md\"\n                borderRadius=\"5px\"\n                defaultValue={selectedNote?.body}\n                ref={register({ validate: validateBody })}\n              />\n              <FormErrorMessage>\n                {!!errors?.body && errors?.body?.message}\n              </FormErrorMessage>\n            </FormControl>\n          </ModalBody>\n          <ModalFooter>\n            <Button\n              type=\"submit\"\n              colorScheme=\"blue\"\n              isLoading={formState.isSubmitting}\n              mr={3}\n            >\n              Save\n            </Button>\n            <Button onClick={onClose}>Cancel</Button>\n          </ModalFooter>\n        </form>\n      </ModalContent>\n    </Modal>\n  );\n};\n\nexport default NoteForm;\n","import * as React from \"react\";\nimport {\n  Box,\n  Text,\n  Flex,\n  Spacer,\n  Heading,\n  Menu,\n  MenuItem,\n  MenuDivider,\n  MenuButton,\n  IconButton,\n  MenuList,\n  HStack,\n  Button,\n  useDisclosure\n} from \"@chakra-ui/react\";\nimport { AddIcon, HamburgerIcon, ArrowRightIcon } from \"@chakra-ui/icons\";\nimport { ColorModeSwitcher } from \"ColorModeSwitcher\";\nimport NoteForm from \"./note-form\";\nimport { motion } from \"framer-motion\";\n\nexport interface TopNavProps {\n  handleNoteCreate?: (note: note) => void;\n}\n\nexport const TopNav: React.SFC<TopNavProps> = ({ handleNoteCreate }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  return (\n    <>\n      <Flex mb={\"30px\"} align=\"center\">\n        <Box p=\"2\" to=\"/\">\n          <motion.div whileHover={{ scale: 1.1 }}>\n            <Heading\n              as=\"h1\"\n              size=\"xl\"\n              bgGradient=\"linear(to-l, #7928CA,#FF0080)\"\n              bgClip=\"text\"\n              _focus={{ boxShadow: \"none\", outline: \"none\" }}\n              _hover={{\n                textDecoration: \"none\",\n                bgGradient: \"linear(to-r, red.500, yellow.500)\"\n              }}\n            >\n              Notebook App\n            </Heading>\n          </motion.div>\n          <Button\n              leftIcon={<AddIcon />}\n              variant=\"outline\"\n              size=\"sm\"\n              onClick={onOpen}\n            >\n              Add new note\n          </Button>\n        </Box>\n        <Spacer />\n        <Box>\n          <ColorModeSwitcher justifySelf=\"flex-end\" />\n        </Box>\n      </Flex>\n      <NoteForm\n        isOpen={isOpen}\n        onClose={onClose}\n        handleNoteCreate={handleNoteCreate}\n      />\n    </>\n  );\n};\n","import * as React from \"react\";\nimport {\n  ModalContent,\n  Modal,\n  ModalBody,\n  ModalOverlay,\n  ModalHeader,\n  ModalCloseButton\n} from \"@chakra-ui/react\";\nimport { motion, AnimatePresence } from \"framer-motion\";\n\nexport interface NoteFormProps {\n  isOpen: boolean;\n  onClose: () => void;\n  selectedNote?: note;\n}\n\nconst NoteModal: React.SFC<NoteFormProps> = ({\n  isOpen,\n  onClose,\n  selectedNote\n}) => {\n  return (\n    <AnimatePresence>\n      <motion.div layoutId={selectedNote?.id}>\n        <Modal\n          isOpen={isOpen}\n          onClose={onClose}\n          scrollBehavior={\"inside\"}\n          isCentered\n          motionPreset=\"slideInBottom\"\n        >\n          <ModalOverlay />\n          <ModalContent>\n            <motion.div>\n              <ModalHeader isTruncated paddingRight=\"10\">\n                {selectedNote?.title}\n              </ModalHeader>\n            </motion.div>\n            <ModalCloseButton />\n            <motion.div>\n              <ModalBody pb={6}>{selectedNote?.body}</ModalBody>\n            </motion.div>\n          </ModalContent>\n        </Modal>\n      </motion.div>\n    </AnimatePresence>\n  );\n};\n\nexport default NoteModal;\n","import * as React from \"react\";\nimport {\n  Box,\n  Stack,\n  Heading,\n  Text,\n  Flex,\n  Center,\n  Fade,\n  Icon,\n  useToast,\n  useColorModeValue,\n  HStack,\n  useDisclosure\n} from \"@chakra-ui/react\";\nimport { DeleteIcon, EditIcon } from \"@chakra-ui/icons\";\nimport { AnimateSharedLayout, motion } from \"framer-motion\";\nimport NoteModal from \"./note-modal\";\nimport StackGrid from \"react-stack-grid\";\n\nexport interface NotesListProps {\n  notes: note[];\n  handleClick: (id: string) => void;\n  setNotes: (note: note[]) => void;\n}\n\nconst NotesList: React.SFC<NotesListProps> = ({\n  notes,\n  handleClick,\n  setNotes\n}) => {\n  const bg = useColorModeValue(\"white\", \"#2f3244\");\n  const [selectedNote, setSelectedNote] = React.useState<note>();\n  const toast = useToast();\n  const { isOpen, onOpen, onClose } = useDisclosure();\n\n  const onDelete = (\n    id: string,\n    e: React.MouseEvent<SVGElement, MouseEvent>\n  ) => {\n    const newNotes: note[] = notes.filter((note: note) => note.id !== id);\n    setNotes(newNotes);\n    showToast();\n    e.stopPropagation();\n  };\n\n  const onClick = (id: string, e: React.MouseEvent<SVGElement, MouseEvent>) => {\n    handleClick(id);\n    e.stopPropagation();\n  };\n\n  const handleSelectedNote = (note: note) => {\n    setSelectedNote(note);\n    onOpen();\n  };\n\n  const showToast = () => {\n    toast({\n      title: \"Note deleted.\",\n      status: \"success\",\n      position: \"top\",\n      duration: 2000,\n      isClosable: true\n    });\n  };\n\n  return (\n    <>\n      <AnimateSharedLayout type=\"crossfade\">\n        <Box minH={\"50vh\"}>\n          {/* <SimpleGrid\n            columns={[1, 2, 2, 3]}\n            mt=\"40px\"\n            gridGap=\"10px\"\n            position=\"relative\"\n            overflow=\"hidden\"\n          > */}\n          <StackGrid columnWidth={330}>\n            {notes.map(note => (\n              <Fade in={true}>\n                <motion.div\n                  whileHover={{ y: -10 }}\n                  layoutId={note.id}\n                  onClick={() => handleSelectedNote(note)}\n                >\n                  <Center py={2} px={2} key={note.id}>\n                    <Box\n                      maxH={\"400px\"}\n                      w=\"100%\"\n                      boxShadow={\"lg\"}\n                      rounded={\"md\"}\n                      p={6}\n                      overflow={\"hidden\"}\n                      cursor=\"pointer\"\n                      _hover={{ boxShadow: \"xl\" }}\n                      bg={bg}\n                      role=\"group\"\n                      // onClick={() => handleClick(note.id, true)}\n                    >\n                      <Stack>\n                        <Flex\n                          _groupHover={{ justifyContent: \"space-between\" }}\n                          justifyContent=\"center\"\n                          align=\"center\"\n                        >\n                          <Box>\n                            <Text\n                              color={\"green.500\"}\n                              textTransform={\"uppercase\"}\n                              fontWeight={800}\n                              fontSize={\"sm\"}\n                              letterSpacing={1.1}\n                            >\n                              Note\n                            </Text>\n                          </Box>\n                          <Box\n                            _groupHover={{ display: \"block\" }}\n                            display=\"none\"\n                          >\n                            <HStack spacing=\"2\">\n                              <Icon\n                                color={\"green.500\"}\n                                _hover={{ color: \"green.600\" }}\n                                _groupHover={{ display: \"block\" }}\n                                as={EditIcon}\n                                w={4}\n                                h={4}\n                                onClick={e => onClick(note.id, e)}\n                              />\n                              <Icon\n                                color={\"green.500\"}\n                                _hover={{ color: \"#ca364a\" }}\n                                _groupHover={{ display: \"block\" }}\n                                as={DeleteIcon}\n                                w={4}\n                                h={4}\n                                onClick={e => onDelete(note.id, e)}\n                              />\n                            </HStack>\n                          </Box>\n                        </Flex>\n                        <Heading\n                          fontSize={\"xl\"}\n                          fontFamily={\"body\"}\n                          textTransform=\"capitalize\"\n                          noOfLines={2}\n                        >\n                          {note.title}\n                        </Heading>\n\n                        <Text\n                          color={\"gray.500\"}\n                          fontSize=\"md\"\n                          noOfLines={{ base: 3, md: 4 }}\n                        >\n                          {note.body}\n                        </Text>\n                      </Stack>\n                    </Box>\n                  </Center>\n                </motion.div>\n              </Fade>\n            ))}\n          </StackGrid>\n          {/* </SimpleGrid> */}\n        </Box>\n        {isOpen ? (\n          <NoteModal\n            isOpen={isOpen}\n            onClose={onClose}\n            selectedNote={selectedNote}\n          />\n        ) : (\n          \"\"\n        )}\n      </AnimateSharedLayout>\n    </>\n  );\n};\n\nexport default NotesList;\n","import * as React from \"react\";\nimport { Heading, Text, Flex, SlideFade } from \"@chakra-ui/react\";\nimport { motion } from \"framer-motion\";\n\nexport default function HeroSection() {\n  return (\n    <>\n      <Flex h={\"55vh\"} justifyContent=\"center\" align=\"center\">\n        <SlideFade in={true} offsetY=\"50vh\">\n          <motion.div whileHover={{ scale: 1.1 }} whileTap={{ scale: 0.9 }}>\n            <Heading\n              fontWeight={600}\n              fontSize={{ base: \"2xl\", sm: \"4xl\", md: \"6xl\" }}\n              lineHeight={\"110%\"}\n            >\n              <Text textShadow=\"1px 1px #9c1786\">Make notes for </Text>\n              <Text\n                as={\"span\"}\n                color={\"green.400\"}\n                bgGradient=\"linear(to-r, green.200, pink.500)\"\n                bgClip=\"text\"\n              >\n                your daily work\n              </Text>\n            </Heading>\n          </motion.div>\n        </SlideFade>\n      </Flex>\n    </>\n  );\n}\n","import * as React from \"react\";\nimport { Box, BoxProps } from \"@chakra-ui/react\";\nimport { AnimatePresence, motion } from \"framer-motion\";\n\nconst MotionBox = motion.custom<BoxProps>(Box);\n\nexport const AnimatePage = ({ children }) => {\n  return (\n    <AnimatePresence initial={true} exitBeforeEnter>\n      <MotionBox\n        as=\"main\"\n        animate=\"enter\"\n        exit=\"exit\"\n        flexGrow={1}\n        initial=\"initial\"\n        variants={{\n          initial: { opacity: 0, y: -200 },\n          enter: { opacity: 1, y: 0 },\n          exit: { opacity: 0, y: 250 }\n        }}\n      >\n        {children}\n      </MotionBox>\n    </AnimatePresence>\n  );\n};\n","import * as React from \"react\";\nimport { useDisclosure, useToast } from \"@chakra-ui/react\";\nimport NotesList from \"./notes-list\";\nimport HeroSection from \"./hero-section\";\nimport NoteForm from \"./note-form\";\nimport { AnimatePage } from \"./motion/motion\";\n\nexport interface HomePageProps {\n  notes: note[];\n  setNotes: (note: note[]) => void;\n}\n\nexport const HomePage: React.SFC<HomePageProps> = ({ notes, setNotes }) => {\n  const { isOpen, onOpen, onClose } = useDisclosure();\n  const [selectedNote, setSelectedNote] = React.useState<note>();\n  const toast = useToast();\n\n  const handleClick = (id: string) => {\n    const selectedNote = notes.find((note: note) => note.id === id);\n    setSelectedNote(selectedNote);\n    onOpen();\n  };\n\n  const handleNoteUpdate = (newNote: note) => {\n    const newNotesState: note[] = [...notes];\n    const index = notes.findIndex((note: note) => note.id === newNote.id);\n    newNotesState[index] = newNote;\n    setNotes(newNotesState);\n    showToast();\n  };\n\n  const showToast = () => {\n    toast({\n      title: \"Note updated.\",\n      status: \"success\",\n      position: \"top\",\n      duration: 2000,\n      isClosable: true\n    });\n  };\n\n  return (\n    <>\n      <AnimatePage>\n        {notes.length ? (\n          <NotesList\n            notes={notes}\n            handleClick={handleClick}\n            setNotes={setNotes}\n          />\n        ) : (\n          <HeroSection />\n        )}\n        {isOpen ? (\n          <NoteForm\n            isOpen={isOpen}\n            onClose={onClose}\n            handleNoteUpdate={handleNoteUpdate}\n            selectedNote={selectedNote}\n          />\n        ) : (\n          \"\"\n        )}\n      </AnimatePage>\n    </>\n  );\n};\n","import * as React from \"react\";\nimport { ChakraProvider, Box, theme } from \"@chakra-ui/react\";\nimport { TopNav } from \"./components/top-nav\";\nimport { HomePage } from \"./components/home-page\";\n\n\nconst App: React.FC = () => {\n  const [notes, setNotes] = React.useState<note[]>([]);\n\n  React.useEffect(() => {\n    const dummyNotes = [\n      {\n        id: \"Odork5n5jPVd0wvm0w_dY\",\n        title: \"Hey 👋\",\n        body:\n          \"I'm dummy note here. Try to update me. Click me to see my remaining part. You can also delete me 😔. But I'll be here again by reopening the app link 😃. \"\n      }\n    ];\n    setNotes(dummyNotes);\n  }, []);\n\n  const handleNoteCreate = (note: note) => {\n    const newNotesState: note[] = [...notes];\n    newNotesState.push(note);\n    setNotes(newNotesState);\n  };\n\n  return (\n    <ChakraProvider theme={theme}>\n      <Box textAlign=\"center\" fontSize=\"xl\" p={5}>\n        <TopNav handleNoteCreate={handleNoteCreate} />\n           <HomePage notes={notes} setNotes={setNotes} />\n      </Box>\n    </ChakraProvider>\n  );\n};\n\nexport default App\n","import { Box, ColorModeScript } from \"@chakra-ui/react\";\nimport * as React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <ColorModeScript />\n      <Box maxW=\"1050px\" mx=\"auto\">\n        <App />\n      </Box>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}